AJS.test.require(["jira.webresources:share-types","jira/share/entities/share-type/group-share","jira/share/entities/share-permission"],function(){"use strict";var e=require("jira/share/controllers/edit-shares-controller"),r=require("jira/share/entities/share-type/group-share"),t=require("jira/share/entities/share-permission"),s=require("jira/share/share-factory"),i=void 0;module("EditSharesController",{setup:function(){this.sandbox=sinon.sandbox.create(),this.mode="editors",this.sandbox.stub(window,"confirm",function(){return!1}),this.modeEditors="editors",this.modeViewers="viewers",this.mockEvent={preventDefault:function(){}},this.preventDefault=sinon.spy(this.mockEvent,"preventDefault"),i=new r(this.modeEditors),this.sandbox.stub(i,"getDisplayFromUI",function(){return{permission:new t("group","jira-servicedesk-users",null)}});var n=s.findDuplicatesInOtherModes.bind(s),o=s.preventSaveHandler.bind(s);this.editorController=new e(this.modeEditors,n,o),this.editorController.registerShareType(i),this.sandbox.stub(this.editorController,"getCurrentShareType",function(){return i}),this.addDisplay=this.sandbox.stub(this.editorController.view,"addDisplay"),this.sandbox.stub(this.editorController,"getNewContainer",function(){return!0}),this.viewerController=new e(this.modeViewers,n,o),this.viewerController.shares=[{id:0,permission:new t("group","jira-administrators-users",null)}],this.removeShare=this.sandbox.stub(this.viewerController,"remove");var a=this.sandbox.stub(s,"getController");a.withArgs("editors").returns(this.editorController),a.withArgs("viewers").returns(this.viewerController)},teardown:function(){this.sandbox.restore()}}),test("No warning is shown if there was no share type nor value changes",function(){this.editorController.defaultShareType="group",this.editorController.selectedShareTypeChanged=!1,this.editorController.saveCallback(this.mockEvent),sinon.assert.notCalled(this.preventDefault)}),test("Dirty warning is shown if the selected share type has been changed",function(){this.editorController.defaultShareType="user",this.editorController.selectedShareTypeChanged=!0,this.editorController.shares=[],this.editorController.saveCallback(this.mockEvent),sinon.assert.calledOnce(this.preventDefault)}),test("Dirty warning is shown if the share type hasn't been changed but the given value has",function(){this.editorController.defaultShareType="group",this.editorController.selectedShareTypeChanged=!1,this.editorController.shares=[],i.dirty=!0,this.editorController.saveCallback(this.mockEvent),sinon.assert.calledOnce(this.preventDefault)}),test("No warning is shown if there are changes, but they have already been saved",function(){this.editorController.selectedShareTypeChanged=!0,this.editorController.shares=[{id:0,permission:new t("group","jira-servicedesk-users",null)}],this.editorController.saveCallback(this.mockEvent),sinon.assert.notCalled(this.preventDefault)}),test("Can't add edit share if view share already exists and user doesn't confirm",function(){var e={permission:new t("group","jira-servicedesk-users",null)};this.editorController.shares=[{id:0,permission:new t("group","jira-servicedesk-users",null)}],notOk(this.viewerController.addShare(e),"Can't add the duplicate share")}),test("Can't add view share if edit share already exists",function(){var e={permission:new t("group","jira-administrators-users",null)};notOk(this.editorController.addShare(e),"Can't add the duplicate share")}),test("Can add duplicate edit share if it is first deleted from view shares",function(){window.confirm.restore();var e=this.sandbox.stub(window,"confirm",function(){return!0}),r={permission:new t("group","jira-administrators-users",null)};this.editorController.addShare(r),sinon.assert.calledOnce(e),sinon.assert.calledOnce(this.removeShare),sinon.assert.calledOnce(this.addDisplay)})});