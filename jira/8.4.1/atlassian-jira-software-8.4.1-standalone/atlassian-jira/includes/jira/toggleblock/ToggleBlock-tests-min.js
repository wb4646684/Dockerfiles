AJS.test.require(["jira.webresources:toggle-block"],function(){"use strict";module("ToggleBlock",{setup:function(){var e=require("jira/toggleblock/toggle-block");this.toggleBlock=new e}}),test("checkIsPermlink",function(){var e="http://localhost:8090/jira/browse/HSP-1",t=this.toggleBlock;ok(t.checkIsPermlink(e+"?focusedCommentId=xxx")),ok(t.checkIsPermlink(e+"?focusedWorklogId=xxx")),ok(t.checkIsPermlink(e+"?focusedCommentId=xxx#zzz")),ok(t.checkIsPermlink(e+"?focusedCommentId=10000&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-10000")),ok(!t.checkIsPermlink(e)),ok(!t.checkIsPermlink(e+"?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-10000"))}),module("ToggleBlock LocalStorage",{setup:function(){this.sandbox=sinon.sandbox.create(),this.context=AJS.test.mockableModuleContext(),this.original$=require("jquery"),this.$=sinon.sandbox.stub(),this.$.returns({is:function(){return!1},data:function(){},delegate:function(){}}),this.$.extend=function(e){for(var t=arguments.length,o=Array(t>1?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];return Object.assign.apply(Object,[e].concat(o))},this.$.inArray=function(e,t){return-1!==t.indexOf(e)},this.context.mock("jquery",this.$),this.getItemMock=sinon.sandbox.stub(),this.setItemMock=sinon.sandbox.spy(),this.context.mock("jira/data/local-storage",{getItem:this.getItemMock,setItem:this.setItemMock}),this.context.mock("jira/util/events",{bind:function(){}});var e=this.context.require("jira/toggleblock/toggle-block");this.toggleBlock=new e},teardown:function(){this.sandbox.restore()},verifyNoExceptionThrown:function(e){e(),ok(!0)},getStorageKey:function(){return"twixi-blocks"}}),test("Should not fail when all ids were filtered out",function(){this.getItemMock.returns('#not;so.correct"id,#another[one'),this.$.reset(),this.toggleBlock._collapseTwiciBlocksFromStorage(),sinon.assert.notCalled(this.$)}),[{name:"Should filter incorrect ids out",in:"#abc,#not;so.correct,#good-one,#bad[one",out:"#abc,#good-one"},{name:"Should handle extra commas and not fail",in:",#greenhopper-agile",out:"#greenhopper-agile"},{name:"Should filter empty & bad ids out and not fail",in:",#abc,,#bad[one,no-hash,",out:"#abc"},{name:"Should keep correct ids",in:"#greenhopper-agile-issue-web-panel,#hipchat-viewissue-panel",out:"#greenhopper-agile-issue-web-panel,#hipchat-viewissue-panel"}].forEach(function(e){test(""+e.name,function(){var t=this;this.getItemMock.returns(e.in),this.$.reset(),this.toggleBlock._collapseTwiciBlocksFromStorage(),sinon.assert.calledOnce(this.$),sinon.assert.calledWithExactly(this.$,e.out),this.verifyNoExceptionThrown(function(){return t.original$(e.out)})})}),[{id:"#one,#two"},{id:"#bad;one"},{id:"no-hash"},{id:"#incorrect.id"}].forEach(function(e){test("Should ignore an invalid id: "+e.id,function(){this.getItemMock.reset(),this.toggleBlock._updateTwixiBlockIdInStorage(e.id),sinon.assert.notCalled(this.getItemMock)})}),[{id:"#good-one",storageIn:"",storageOut:"#good-one"},{id:"#correct-id__v2",storageIn:"#good-one",storageOut:"#good-one,#correct-id__v2"},{id:"#a-We__SoM---e1D-000",storageIn:"#correct-id__v2,#good-one",storageOut:"#correct-id__v2,#good-one,#a-We__SoM---e1D-000"}].forEach(function(e){test("Should add the id="+e.id+" to the storage with initial content: "+e.storageIn,function(){this.getItemMock.returns(e.storageIn),this.setItemMock.reset(),this.toggleBlock._updateTwixiBlockIdInStorage(e.id),sinon.assert.calledOnce(this.setItemMock),sinon.assert.calledWithExactly(this.setItemMock,this.getStorageKey(),e.storageOut)})}),[{id:"#good-one",storageIn:"#good-one",storageOut:""},{id:"#good-one",storageIn:"#good-one,#correct-id__v2",storageOut:"#correct-id__v2"},{id:"#correct-id__v2",storageIn:"#good-one,#correct-id__v2",storageOut:"#good-one"},{id:"#a-We__SoM---e1D-000",storageIn:"#correct-id__v2,#a-We__SoM---e1D-000,#good-one",storageOut:"#correct-id__v2,#good-one"}].forEach(function(e){test("Should remove the id="+e.id+" from the storage with initial content: "+e.storageIn,function(){this.getItemMock.returns(e.storageIn),this.setItemMock.reset(),this.toggleBlock._updateTwixiBlockIdInStorage(e.id),sinon.assert.calledOnce(this.setItemMock),sinon.assert.calledWithExactly(this.setItemMock,this.getStorageKey(),e.storageOut)})}),[{id:"#good-one",storageIn:",#good-one",storageOut:""},{id:"#good-one",storageIn:"#good-one,",storageOut:""},{id:"#good-one",storageIn:"#bad.one,#correct-id__v2,",storageOut:"#correct-id__v2,#good-one"},{id:"#a-We__SoM---e1D-000",storageIn:"00,#abc,no-hash,#good-one,#bad;one,,+_),',\",&,^,:,*,+,[,],,,",storageOut:"#abc,#good-one,#a-We__SoM---e1D-000"}].forEach(function(e){test("Should filter out incorrect values on save from the storage with initial content: "+e.storageIn,function(){this.getItemMock.returns(e.storageIn),this.setItemMock.reset(),this.toggleBlock._updateTwixiBlockIdInStorage(e.id),sinon.assert.calledOnce(this.setItemMock),sinon.assert.calledWithExactly(this.setItemMock,this.getStorageKey(),e.storageOut)})})});